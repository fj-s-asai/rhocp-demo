

■rhocp-demo  :  デモリポジトリ

https://github.com/yuu-ymt/rhocp-demo.git


・まず最初にこのリポジトリをクローンし、本ファイルを含め情報を入手する。


・OpenShift用の各種YAMLファイルを格納しておく。
　※２週間に一度、再構築する必要があるため。

・コンテナ用リソース（ImageStream、BuildConfig等）は、コンテナ毎にフォルダに格納する。
  - frontweb
  - backweb1
  - backweb2
  - nodebase
  - mysql


■コードを編集するには、以下のリポジトリをcloneする。

======================== openshift:demoプロジェクト

- rhocp-demo-frontweb  :  frontwebコンテナ用

https://github.com/yuu-ymt/rhocp-demo-frontweb.git

・Dockerfile    => Dockerビルド用
・その他各種アプリ用ファイル



- rhocp-demo-backweb1  :  backweb1コンテナ用

https://github.com/yuu-ymt/rhocp-demo-backweb1.git

・Dockerfile    => Dockerビルド用
・その他各種アプリ用ファイル



- rhocp-demo-backweb2  :  backweb2コンテナ用

https://github.com/yuu-ymt/rhocp-demo-backweb2.git


・Dockerfile    => Dockerビルド用
・その他各種アプリ用ファイル



- rhocp-demo-base-node  :  webアプリ用ベースイメージ

https://github.com/yuu-ymt/rhocp-demo-base-node.git

・Dockerfile    ==> Dockerビルド用





- rhocp-demo-mysql  :  mysql用イメージ

https://github.com/yuu-ymt/rhocp-demo-mysql.git


・Dockerfile    ==> Dockerビルド用


- rhocp-demo-restdb

https://github.com/yuu-ymt/rhocp-demo-restdb.git

・Dockerfile    ==> Dockerビルド用



===========================  openshift: cdsプロジェクト（固定）

- rhocp-demo-cds   :  画像共有サーバ（nginx）

https://github.com/yuu-ymt/rhocp-demo-cds.git

・Dockerfile   => Dockerビルド用


- rhocp-demo-cdsupdater  :  NFS-PVコンテンツのアップデータ（コマンド）

https://github.com/yuu-ymt/rhocp-demo-cdsupdater.git


・Dockerfile   ==> Dockerビルド用


- rhocp-demo-contents  :  画像ファイルなどのコンテンツ

https://github.com/yuu-ymt/rhocp-demo-contents.git


・images　　　==> 画像ファイルの格納
・videos      ==> 動画ファイルの格納　（今回動画使用しない）











■その他


・アプリ用ソースGitリポジトリとDockerfileを格納するGitリポジトリは一つのリポジトリに集約した。
　※リポジトリが多くなりすぎるため。
　
・各アプリ（fronweb、backweb1、backweb2）は、共通のベースイメージを参照する内容とする。
　そのため、DockerfileのFromにImageRegistryのURLを記載する必要があり、プロジェクト名などが直書き
　になってしまう。
　
　
　==> 現在、アプリケーションイメージを作成するためのDockerfileはGitにファイルとして配置しているが、
　　　この後のパイプラインを考えるとひょっとしたら、BuildConfigのインライン形式にするかもしれない。
　　　--> ここはまだ未定。（とりあえずまずはDockerfileをGitに置くスタイルで）


・プロジェクト名は、とりあえず"demo"でまずは決め打ちとする。




・画像ファイルについてはサービスメッシュの環境から抜きたいため、別プロジェクトで、
　CDSサーバ（nginx）をたてて、そこから画像ファイルを供給する仕組みとする。
　※HTMLからは、絶対パスによりこのCDSサーバのRouteで作成したURLを指定する仕組みとする。

・CDSプロジェクトは、アプリからURLが指定されるため、プロジェクト名は基本、固定とする（cds）

・画像ファイル自体はGit上で管理するものとする。

・cdsサーバは、nginxで作成し、NFSによりボリュームをマウントし画像ファイルを供給する。

・cdsupdateも同一のNFSボリュームをマウントし、任意のタイミングでgit pull することで、
　PVボリューム内のファイルを最新化する。

・cdsudpateは、常駐型のサーバアプリである必要はなく、git pullが終了したら消滅するコンテナであればよい。

・Git上で保管されている画像ファイルに追加や更新があった場合は、そこからパイプラインでcdsupdateを起動し、
　共有NFSボリュームをUpdateする仕組みを見せたい。

・cdsの仕組みは、「CDNサーバ」の代替の位置づけ。
　SOEアプリを想定し、一時プロモーションやキャンペーンを想定し動的コンテンツや商品画像などのコンテンツ供給をストレスフリーで提供する仕組みとしてCDNというものがある・・・という紹介の位置づけ。




■セットアップ

OCクライアント端末上において、以下を実行する。


※Istioがインストールされ、"demo"プロジェクトがサービスメッシュの対象になっていることが前提。
※この手順（demoプロジェクトをサービスメッシュ対象にする）については、別途手順書を参照。


1) 以下のコマンドで、GITからリソースを取得する。

https://github.com/yuu-ymt/rhocp-demo.git


2) カレントディレクトリを変更する。

cd rhocp-demo

3) setup.shを実行する。

chmod +x setup.sh
./setup.sh


------


4) mysqlの初期セットアップを行う。

GUIコンソールからmysqlコンテナにTerminal接続を行う。

以下のコマンドを実行する。

./initialize.sh























